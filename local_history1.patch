Index: core/src/de/tum/cit/ase/maze/GameMap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/de/tum/cit/ase/maze/GameMap.java b/core/src/de/tum/cit/ase/maze/GameMap.java
--- a/core/src/de/tum/cit/ase/maze/GameMap.java	
+++ b/core/src/de/tum/cit/ase/maze/GameMap.java	(date 1704667156635)
@@ -3,12 +3,11 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Properties;
-import java.io.InputStream;
-import java.io.FileInputStream;
-import java.io.IOException;
 
 public class GameMap {
     private MapObject[][] staticMapObjects;
+    private List<Enemy> enemies;
+    private int keysLeft;
 
     public List<Enemy> getEnemies() {
         return enemies;
@@ -26,7 +25,6 @@
 
     // Loads Game Map into the staticMapObjects
     public void loadMap(String filePath){
-        System.out.println("Loading map from path:" + filePath);
         enemies = new ArrayList<>();
         Properties prop = new Properties();
         int[][] intArray;
@@ -35,37 +33,45 @@
         try (InputStream input = new FileInputStream(filePath)) {
             prop.load(input);
 
-            // First pass to find the size of the array
-            for (String key : prop.stringPropertyNames()) {
-                String[] parts = key.split(",");
-                int row = Integer.parseInt(parts[0]);
-                int col = Integer.parseInt(parts[1]);
-                maxRow = Math.max(maxRow, row);
-                maxCol = Math.max(maxCol, col);
-            }
+                Iterator var7;
+                String key;
+                String[] parts;
+                int row;
+                int col;
+                for(var7 = prop.stringPropertyNames().iterator(); var7.hasNext(); maxCol = Math.max(maxCol, col)) {
+                    key = (String)var7.next();
+                    parts = key.split(",");
+                    row = Integer.parseInt(parts[0]);
+                    col = Integer.parseInt(parts[1]);
+                    maxRow = Math.max(maxRow, row);
+                }
 
-            // Initialize the intArray with -1
-            intArray = new int[maxRow + 1][maxCol + 1]; // +1 because arrays are 0-indexed
-            for (int[] row : intArray) {
-                Arrays.fill(row, -1);
-            }
+                int[][] intArray = new int[maxRow + 1][maxCol + 1];
+                int[][] var15 = intArray;
+                int j = intArray.length;
+
+                for(int var18 = 0; var18 < j; ++var18) {
+                    int[] row = var15[var18];
+                    Arrays.fill(row, -1);
+                }
 
-            // Second pass to fill the array
-            for (String key : prop.stringPropertyNames()) {
-                String[] parts = key.split(",");
-                int row = Integer.parseInt(parts[0]);
-                int col = Integer.parseInt(parts[1]);
-                intArray[row][col] = Integer.parseInt(prop.getProperty(key));
-            }
-            // Example to print the array
-            for (int i = 0; i < intArray.length; i++) {
-                for (int j = 0; j < intArray[i].length; j++) {
-                    System.out.print(intArray[i][j] + " ");
-                }
-                System.out.println();
-            }
+                for(var7 = prop.stringPropertyNames().iterator(); var7.hasNext(); intArray[row][col] = Integer.parseInt(prop.getProperty(key))) {
+                    key = (String)var7.next();
+                    parts = key.split(",");
+                    row = Integer.parseInt(parts[0]);
+                    col = Integer.parseInt(parts[1]);
+                }
+
+                int i;
+                for(i = 0; i < intArray.length; ++i) {
+                    for(j = 0; j < intArray[i].length; ++j) {
+                        System.out.print(intArray[i][j] + " ");
+                    }
+
+                    System.out.println();
+                }
 
-            staticMapObjects = new MapObject[maxRow + 1][maxCol + 1];
+                this.staticMapObjects = new MapObject[maxRow + 1][maxCol + 1];
 
             for (int i = 0; i < intArray.length; i++) {
                 for (int j = 0; j < intArray[i].length; j++) {
@@ -96,15 +102,25 @@
                             break;
                     }
                 }
+            } catch (Throwable var13) {
+                try {
+                    input.close();
+                } catch (Throwable var12) {
+                    var13.addSuppressed(var12);
+                }
+
+                throw var13;
             }
 
-        } catch (IOException ex) {
-            ex.printStackTrace();
+            input.close();
+        } catch (IOException var14) {
+            var14.printStackTrace();
         }
+
     }
 
     public MapObject[][] getStaticMapObjects() {
-        return staticMapObjects;
+        return this.staticMapObjects;
     }
 
     public float getMapWidth(){
Index: core/src/de/tum/cit/ase/maze/GameEngine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/de/tum/cit/ase/maze/GameEngine.java b/core/src/de/tum/cit/ase/maze/GameEngine.java
--- a/core/src/de/tum/cit/ase/maze/GameEngine.java	
+++ b/core/src/de/tum/cit/ase/maze/GameEngine.java	(date 1704667156632)
@@ -1,13 +1,16 @@
+//
+// Source code recreated from a .class file by IntelliJ IDEA
+// (powered by FernFlower decompiler)
+//
+
 package de.tum.cit.ase.maze;
 
-import java.io.Serializable;
-
 public class GameEngine {
     private GameMap staticGameMap;
-
+    private Player player;
 
     public Player getPlayer() {
-        return player;
+        return this.player;
     }
 
     public void setPlayer(Player player) {
@@ -17,27 +20,19 @@
     private Player player;
 
 
-    public GameEngine(MazeRunnerGame game) {
-
+    public GameEngine() {
         System.out.println("Loading Game Engine");
         System.out.println("Current working directory: " + System.getProperty("user.dir"));
-
-
-        System.out.println("Game engine select:"+game.selectedMap);
-        player = new Player();
-        staticGameMap = new GameMap();
-        staticGameMap.loadMap(game.selectedMap);
+        System.out.println("Game engine select:" + game.selectedMap);
+        this.player = new Player();
+        this.staticGameMap = new GameMap();
+        this.staticGameMap.loadMap(game.selectedMap);
     }
 
-    // Needs to be changed later with Map-Selection Menu
-    public void loadMap(){
-        //String mapPath = "maps/" + mapName + ".properties"; // Construct the path
-        //staticGameMap.loadMap("maps/level-1.properties");
-
+    public void loadMap() {
     }
-
 
     public GameMap getStaticGameMap() {
-        return staticGameMap;
+        return this.staticGameMap;
     }
 }
Index: core/src/de/tum/cit/ase/maze/MenuScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/de/tum/cit/ase/maze/MenuScreen.java b/core/src/de/tum/cit/ase/maze/MenuScreen.java
--- a/core/src/de/tum/cit/ase/maze/MenuScreen.java	
+++ b/core/src/de/tum/cit/ase/maze/MenuScreen.java	(date 1704667156625)
@@ -19,10 +19,6 @@
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.viewport.ScreenViewport;
 import com.badlogic.gdx.utils.viewport.Viewport;
-import com.badlogic.gdx.files.FileHandle;
-import java.util.ArrayList;
-import java.util.List;
-
 
 /**
  * The MenuScreen class is responsible for displaying the main menu of the game.
@@ -33,20 +29,12 @@
     private final Stage stage;
     private float elapsedTime = 2f;
 
-    private Array<String> mapNames = new Array<>();
-
-
-
     /**
      * Constructor for MenuScreen. Sets up the camera, viewport, stage, and UI elements.
      *
      * @param game The main game class, used to access global resources and methods.
      */
-
-
-
     public MenuScreen(MazeRunnerGame game) {
-        game.setMenuScreen(this);
         var camera = new OrthographicCamera();
         camera.zoom = 1.5f; // Set camera zoom for a closer view
 
@@ -57,15 +45,14 @@
         table.setFillParent(true); // Make the table fill the stage
         stage.addActor(table); // Add the table to the stage
 
-
         Image fireImage = createFireAnimation();
         table.add(fireImage).padBottom(100).row();
 
         // Add a label as a title
-        table.add(new Label("Start the game!", game.getSkin(), "title")).padBottom(80).row();
+        table.add(new Label("Welcome to Maze Runner Game!", game.getSkin(), "title")).padBottom(80).row();
 
         // Create and add a button to go to the game screen
-        TextButton goToGameButton = new TextButton("START", game.getSkin());
+        TextButton goToGameButton = new TextButton("Go To Game", game.getSkin());
         table.add(goToGameButton).width(300).row();
         // Add sound effect to the button
         goToGameButton.addListener(new ChangeListener() {
@@ -78,42 +65,7 @@
                 game.goToGame();
             }
         });
-
-
-
-
-
-
-
-
-
-        //game.getGameEngine().loadMap("maps/level-" + finalI+1 + ".properties");
-        //game.setSelectedMap(mapNames.get(selector));
-
-        //game.goToGame(); // Go to game screen after selecting the level
-        //game.setSelectedMap(selectedMap);
-
-
-
-
-
-
-
     }
-    private String[] getMapNames() {
-        FileHandle dirHandle = Gdx.files.internal("maps"); // Directory where maps are stored
-
-        for (FileHandle entry : dirHandle.list()) {
-            if (entry.extension().equals("properties")) {
-                mapNames.add("maps/"+entry.name());
-            }
-        }
-        mapNames.sort();
-
-        return mapNames.toArray(String.class);
-    }
-
-
 
     // Create an animation for the skull
     private Image createFireAnimation() {
Index: core/src/de/tum/cit/ase/maze/MazeRunnerGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/de/tum/cit/ase/maze/MazeRunnerGame.java b/core/src/de/tum/cit/ase/maze/MazeRunnerGame.java
--- a/core/src/de/tum/cit/ase/maze/MazeRunnerGame.java	
+++ b/core/src/de/tum/cit/ase/maze/MazeRunnerGame.java	(date 1704667156622)
@@ -1,37 +1,27 @@
+//
+// Source code recreated from a .class file by IntelliJ IDEA
+// (powered by FernFlower decompiler)
+//
+
 package de.tum.cit.ase.maze;
 
 import com.badlogic.gdx.Game;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.audio.Music;
-import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.graphics.g2d.Animation;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.g2d.TextureRegion;
 import com.badlogic.gdx.scenes.scene2d.ui.Skin;
-import com.badlogic.gdx.utils.Array;
 import games.spooky.gdx.nativefilechooser.NativeFileChooser;
-import com.badlogic.gdx.utils.Json;
-import com.badlogic.gdx.files.FileHandle;
 
-/**
- * The MazeRunnerGame class represents the core of the Maze Runner game.
- * It manages the screens and global resources like SpriteBatch and Skin.
- */
 public class MazeRunnerGame extends Game {
-    // Screens
     private MenuScreen menuScreen;
-    private GameScreen gameScreen;
     private PauseMenuScreen pauseMenuScreen;
-    private SelectScreen selectScreen;
-
-    public String selectedMap;
 
 
 
     // Sprite Batch for rendering
     private SpriteBatch spriteBatch;
-
-    // UI Skin
     private Skin skin;
     // Music
     private Music backGroundMusic;
@@ -42,35 +32,37 @@
     // Character animation downwards
     private Animation<TextureRegion> characterDownAnimation;
 
-    // Setter &Getter methods
     public Skin getSkin() {
-        return skin;
+        return this.skin;
+    }
+
+    public Animation<TextureRegion> getCharacterDownAnimation() {
+        return gameEngine.getPlayer().getCharacterDownAnimation();
     }
 
     public SpriteBatch getSpriteBatch() {
-        return spriteBatch;
+        return this.spriteBatch;
     }
-
 
     public GameEngine getGameEngine() {
-        return gameEngine;
+        return this.gameEngine;
     }
 
-    public void setPauseMenuScreen(PauseMenuScreen pauseMenuScreen) {
-        this.pauseMenuScreen = pauseMenuScreen;
+
+    private Music backgroundMusic;
+
+
+
+    //JODIE TRYING OUT THINGS
+    public GameScreen getGameScreen() {
+        return gameScreen;
     }
 
     public void setGameScreen(GameScreen gameScreen) {
         this.gameScreen = gameScreen;
     }
+    //JODIE TRYING OUT THINGS
 
-    public void setSelectedMap(String selectedMap) {
-        this.selectedMap = selectedMap;
-    }
-
-    public String getSelectedMap() {
-        return selectedMap;
-    }
 
     public Music getBackgroundMusic() {
         return backGroundMusic;
@@ -84,19 +76,9 @@
         this.selectScreen = selectScreen;
     }
 
-    /**
-     * Constructor for MazeRunnerGame.
-     *
-     * @param fileChooser The file chooser for the game, typically used in desktop environment.
-     */
     public MazeRunnerGame(NativeFileChooser fileChooser) {
-        super();
     }
 
-    /**
-     * Called when the game is created. Initializes the SpriteBatch and Skin.
-     */
-    @Override
     public void create() {
         spriteBatch = new SpriteBatch(); // Create SpriteBatch
         skin = new Skin(Gdx.files.internal("craft/craftacular-ui.json")); // Load UI skin
@@ -108,41 +90,22 @@
         backGroundMusic.setLooping(true);
         backGroundMusic.play();
 
-        goToSelect();
-        //gameEngine = new GameEngine(this);
-        // Navigate to the menu screen
         // Load Engine and Map
+        gameEngine = new GameEngine();
 
+        goToMenu(); // Navigate to the menu screen
 
     }
 
 
-
-    /**
-     * Switches to the select screen.
-     */
-    public void goToSelect() {
-        this.selectScreen=new SelectScreen(this);
-        this.setScreen(selectScreen);
-        // Set the current screen to MenuScreen
-        if (gameScreen != null) {
-            gameScreen.dispose(); // Dispose the game screen if it exists
-            gameScreen = null;
-        }
-    }
-
-
-    /**
-     * Switches to the menu screen.
-     */
     public void goToMenu() {
-        this.menuScreen=new MenuScreen(this);
-        this.setScreen(menuScreen);
-        // Set the current screen to MenuScreen
-        if (gameScreen != null) {
-            gameScreen.dispose(); // Dispose the game screen if it exists
-            gameScreen = null;
+        this.menuScreen = new MenuScreen(this);
+        this.setScreen(this.menuScreen);
+        if (this.gameScreen != null) {
+            this.gameScreen.dispose();
+            this.gameScreen = null;
         }
+
     }
     /**
      * Switches to the pause menu screen when press ESC.
@@ -167,6 +130,7 @@
             gameScreen.dispose(); // Dispose the game screen if it exists
             gameScreen = null;
         }
+
     }
 
     public void goToGameOverScreen(){
@@ -185,17 +149,14 @@
      */
 
     public void goToGame() {
-        this.selectedMap= selectScreen.getSelectedMap();
-        System.out.println(getSelectedMap());
-        this.gameEngine=new GameEngine(this);
         this.setScreen(new GameScreen(this)); // Set the current screen to GameScreen
 
         if (menuScreen != null) {
             menuScreen.dispose(); // Dispose the menu screen if it exists
             menuScreen = null;
         }
-    }
 
+    }
 
     public void continueGame(){
        // this.setScreen(getGameScreen());// Set the current screen to GameScreen
Index: core/src/de/tum/cit/ase/maze/PauseMenuScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/de/tum/cit/ase/maze/PauseMenuScreen.java b/core/src/de/tum/cit/ase/maze/PauseMenuScreen.java
--- a/core/src/de/tum/cit/ase/maze/PauseMenuScreen.java	
+++ b/core/src/de/tum/cit/ase/maze/PauseMenuScreen.java	(date 1704667156613)
@@ -3,7 +3,6 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Screen;
 import com.badlogic.gdx.audio.Music;
-import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.OrthographicCamera;
 import com.badlogic.gdx.scenes.scene2d.Actor;
@@ -24,25 +23,18 @@
 
     private final Stage stage;
 
-
-
-
-
     /**
      * Constructor for PauseMenuScreen. Sets up the camera, viewport, stage, and UI elements.
      *
      * @param game The main game class, used to access global resources and methods.
      */
     public PauseMenuScreen(MazeRunnerGame game) {
-
-        game.setPauseMenuScreen(this);
         var camera = new OrthographicCamera();
         camera.zoom = 1.5f; // Set camera zoom for a closer view
 
         Viewport viewport = new ScreenViewport(camera); // Create a viewport with the camera
         stage = new Stage(viewport, game.getSpriteBatch()); // Create a stage for UI elements
 
-
         Table table = new Table(); // Create a table for layout
         table.setFillParent(true); // Make the table fill the stage
         stage.addActor(table); // Add the table to the stage
@@ -53,14 +45,12 @@
         table.add(new Label("Welcome to Pause Menu!", game.getSkin(), "title")).padBottom(80).row();
 
         TextButton continueButton = new TextButton("Continue Game", game.getSkin());
-        //continueButton.setColor(Color.BLUE);
         table.add(continueButton).width(300).row();
         continueButton.addListener(new ChangeListener() {
             @Override
             public void changed(ChangeEvent event, Actor actor) {
-                clickSound(); // Sound effect
-                game.continueGame();
-
+                clickSound();
+                //game.resumeGame();
 
             }
         });
@@ -70,7 +60,7 @@
         startNewGameButton.addListener(new ChangeListener() {
             @Override
             public void changed(ChangeEvent event, Actor actor) {
-                clickSound(); // Sound effect
+                clickSound();
                 buttonStartNewGameFadeAway(startNewGameButton, game);
                 /*game.dispose();
                 game.create();
@@ -84,7 +74,7 @@
         exitButton.addListener(new ChangeListener() {
             @Override
             public void changed(ChangeEvent event, Actor actor) {
-                clickSound();  // Sound effect
+                clickSound();
                 exitButton.addAction(Actions.sequence(
                         Actions.fadeOut(0.5f),// Duration of the fade-out effect
                         Actions.run(new Runnable() {
@@ -97,34 +87,16 @@
                             }
                         })
                 ));
-            }
-        });
-
-
-    }
-
-    /**
-     * Fade away animation for Start New Game button.
-     */
-
-    private void buttonStartNewGameFadeAway(TextButton textButton,MazeRunnerGame game){
-        textButton.addAction(Actions.sequence(
-                Actions.fadeOut(0.5f),// Duration of the fade-out effect
-                Actions.run(new Runnable() {
-                    @Override
-                    public void run() {
-                        // Dispose of the current game and create a new one
-                        game.dispose();
-                        game.create();
-                        // You can add more animation effects here if needed
-
-                        // Switch to the game screen
-                        game.goToGame();
-                    }
-                })
-        ));
+                /*game.dispose();
+                game.create();
+                game.goToMenu();*/
+            }
+        });
+
+
 
     }
+
 
 
     @Override
@@ -154,13 +126,35 @@
     /**
      * Sound effect when buttons clicked.
      */
-    private void clickSound(){
+    public void clickSound(){
         Music clickMusic = Gdx.audio.newMusic(Gdx.files.internal("click_sound.mp3"));
         clickMusic.setVolume(2.5f);
         clickMusic.setLooping(false);
         clickMusic.play();
     }
 
+    /**
+     * Fade away animation for Start New Game button.
+     */
+
+    public void buttonStartNewGameFadeAway(TextButton textButton,MazeRunnerGame game){
+        textButton.addAction(Actions.sequence(
+                Actions.fadeOut(0.5f),// Duration of the fade-out effect
+                Actions.run(new Runnable() {
+                    @Override
+                    public void run() {
+                        // Dispose of the current game and create a new one
+                        game.dispose();
+                        game.create();
+                        // You can add more animation effects here if needed
+
+                        // Switch to the game screen
+                        game.goToGame();
+                    }
+                })
+        ));
+    }
+
     // The following methods are part of the Screen interface but are not used in this screen.
     @Override
     public void pause() {
@@ -168,6 +162,7 @@
 
     public void resume(){
 
+
     }
 
 
Index: core/src/de/tum/cit/ase/maze/GameScreen_dispose_flow.puml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/de/tum/cit/ase/maze/GameScreen_dispose_flow.puml b/core/src/de/tum/cit/ase/maze/GameScreen_dispose_flow.puml
--- a/core/src/de/tum/cit/ase/maze/GameScreen_dispose_flow.puml	
+++ b/core/src/de/tum/cit/ase/maze/GameScreen_dispose_flow.puml	(date 1704667156608)
@@ -1,83 +1,0 @@
-@startuml
-
-/' diagram meta data start
-config=FlowConfiguration;
-{
-  "rootMethod": "de.tum.cit.ase.maze.GameScreen#dispose()",
-  "projectClassification": {
-    "searchMode": "OpenProject", // OpenProject, AllProjects
-    "includedProjects": "",
-    "pathEndKeywords": "*.impl",
-    "isClientPath": "",
-    "isClientName": "",
-    "isTestPath": "",
-    "isTestName": "",
-    "isMappingPath": "",
-    "isMappingName": "",
-    "isDataAccessPath": "",
-    "isDataAccessName": "",
-    "isDataStructurePath": "",
-    "isDataStructureName": "",
-    "isInterfaceStructuresPath": "",
-    "isInterfaceStructuresName": "",
-    "isEntryPointPath": "",
-    "isEntryPointName": "",
-    "treatFinalFieldsAsMandatory": false
-  },
-  "graphRestriction": {
-    "classPackageExcludeFilter": "",
-    "classPackageIncludeFilter": "",
-    "classNameExcludeFilter": "",
-    "classNameIncludeFilter": "",
-    "methodNameExcludeFilter": "",
-    "methodNameIncludeFilter": "",
-    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
-    "removeByAnnotation": "",
-    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
-    "removeByClassName": "",
-    "cutMappings": false,
-    "cutEnum": false,
-    "cutTests": true,
-    "cutClient": true,
-    "cutDataAccess": false,
-    "cutInterfaceStructures": false,
-    "cutDataStructures": false,
-    "cutGetterAndSetter": false,
-    "cutConstructors": false
-  },
-  "graphTraversal": {
-    "forwardDepth": 3,
-    "backwardDepth": 3,
-    "classPackageExcludeFilter": "",
-    "classPackageIncludeFilter": "",
-    "classNameExcludeFilter": "",
-    "classNameIncludeFilter": "",
-    "methodNameExcludeFilter": "",
-    "methodNameIncludeFilter": "",
-    "hideMappings": false,
-    "hideDataStructures": false,
-    "hidePrivateMethods": true,
-    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
-    "onlyShowApplicationEntryPoints": false, // root node is included
-    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
-  },
-  "rootClass": "de.tum.cit.ase.maze.GameScreen",
-  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
-}
-diagram meta data end '/
-
-
-
-digraph g {
-    rankdir="TB"
-    splines=polyline
-    
-
-'nodes 
-
-
-'edges    
-
-    
-}
-@enduml
\ No newline at end of file
Index: core/src/de/tum/cit/ase/maze/VictoryScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/de/tum/cit/ase/maze/VictoryScreen.java b/core/src/de/tum/cit/ase/maze/VictoryScreen.java
--- a/core/src/de/tum/cit/ase/maze/VictoryScreen.java	
+++ b/core/src/de/tum/cit/ase/maze/VictoryScreen.java	(date 1704667156573)
@@ -71,6 +71,14 @@
 
         table.add(new Label("You successfully exit the maze", game.getSkin(), "title")).padBottom(80).row();
 
+        TextButton continueButton = new TextButton("Next Level", game.getSkin());
+        table.add(continueButton).width(300).row();
+        continueButton.addListener(new ChangeListener() {
+            @Override
+            public void changed(ChangeEvent event, Actor actor) {
+                clickSound();
+            }
+        });
 
         TextButton startNewGameButton = new TextButton("Play Again", game.getSkin());
         table.add(startNewGameButton).width(300).row();
@@ -109,7 +117,7 @@
                 Actions.run(() -> {
                     game.dispose();
                     game.create();
-                    game.goToSelect();
+                    game.goToMenu();
                 })
         ));
     }
Index: core/src/de/tum/cit/ase/maze/GameOverScreen.java
===================================================================
diff --git a/core/src/de/tum/cit/ase/maze/GameOverScreen.java b/core/src/de/tum/cit/ase/maze/GameOverScreen.java
deleted file mode 100644
--- a/core/src/de/tum/cit/ase/maze/GameOverScreen.java	
+++ /dev/null	
@@ -1,197 +0,0 @@
-package de.tum.cit.ase.maze;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.audio.Music;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.OrthographicCamera;
-import com.badlogic.gdx.scenes.scene2d.Actor;
-import com.badlogic.gdx.scenes.scene2d.Stage;
-import com.badlogic.gdx.scenes.scene2d.actions.Actions;
-import com.badlogic.gdx.scenes.scene2d.ui.Image;
-import com.badlogic.gdx.scenes.scene2d.ui.Label;
-import com.badlogic.gdx.scenes.scene2d.ui.Table;
-import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
-import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
-import com.badlogic.gdx.utils.viewport.ScreenViewport;
-import com.badlogic.gdx.utils.viewport.Viewport;
-import com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.graphics.g2d.TextureRegion;
-
-/**
- * The GameOverScreen class displays the game over screen in the middle of the game.
- * It extends the LibGDX Screen class and sets up the UI components for the screen.
- */
-public class GameOverScreen implements Screen {
-
-    private final Stage stage;
-    private float elapsedTime = 2f;
-
-    private Music gameOverMusic =  Gdx.audio.newMusic(Gdx.files.internal("gameOverMusic.mp3"));
-
-    /**
-     * Constructor for GameOverScreen. Sets up the camera, viewport, stage, and UI elements.
-     *
-     * @param game The main game class, used to access global resources and methods.
-     */
-    public GameOverScreen(MazeRunnerGame game) {
-        // Music
-        game.getBackgroundMusic().dispose();
-        gameOverMusic.setVolume(0.5f);
-        gameOverMusic.setLooping(true);
-        gameOverMusic.play();
-
-        // Set up Screen
-        OrthographicCamera camera = new OrthographicCamera();
-        camera.zoom = 1.5f;
-
-        Viewport viewport = new ScreenViewport(camera);
-        this.stage = new Stage(viewport, game.getSpriteBatch());
-
-        Table table = new Table();
-        table.setFillParent(true);
-        stage.addActor(table);
-
-        // Create a Label with the lost text
-        Label lost = new Label("You Lost!", game.getSkin(), "title");
-        lost.setColor(Color.BLUE);
-
-        // Set up actions to make the text move, change color, and scale
-        lost.addAction(
-                Actions.forever(
-                        Actions.sequence(
-                                Actions.color(new Color(0.5f, 0.5f, 1, 1), 2.0f),
-                                Actions.color(Color.GRAY, 2.0f),
-                                Actions.color(Color.BLUE, 2.0f)
-                        )
-                )
-        );
-        table.add(lost).padBottom(150).row();
-
-        // Create an animation for the skull
-        Image skullImage = createSkullAnimation();
-        table.add(skullImage).padBottom(50).row();
-
-        // Add a label as a title
-        table.add(new Label("Nice try", game.getSkin(), "title")).padBottom(80).row();
-
-        // Add Play Again button
-        TextButton startNewGameButton = new TextButton("Play Again", game.getSkin());
-        table.add(startNewGameButton).width(300).row();
-        startNewGameButton.addListener(new ChangeListener() {
-            @Override
-            public void changed(ChangeEvent event, Actor actor) {
-                clickSound();
-                gameOverMusic.dispose();
-                buttonStartNewGameFadeAway(startNewGameButton, game);
-            }
-        });
-
-        // Add Back to Menu button
-        TextButton exitButton = new TextButton("Back to Menu", game.getSkin());
-        table.add(exitButton).width(300).row();
-        exitButton.addListener(new ChangeListener() {
-            @Override
-            public void changed(ChangeEvent event, Actor actor) {
-                clickSound();
-                gameOverMusic.dispose();
-                exitButton.addAction(Actions.sequence(
-                        Actions.fadeOut(0.5f),
-                        Actions.run(() -> {
-                            game.dispose();
-                            game.create();
-                            game.goToSelect();
-                        })
-                ));
-            }
-        });
-    }
-
-    // Create an animation for the skull
-    private Image createSkullAnimation() {
-        Array<TextureRegion> skullFrames = new Array<>();
-        Texture skullSheet = new Texture(Gdx.files.internal("ExplosiveSkullPixelArt.png"));
-        int frameWidth = 32;
-        int frameHeight = 32;
-        int animationFramesRow = 4;
-
-        for (int i = 0; i < animationFramesRow; i++) {
-            for(int j =0; j<3;j++){
-                skullFrames.add(new TextureRegion(skullSheet, j * frameWidth, i*frameHeight, frameWidth, frameHeight));
-            }
-        }
-
-        Image skullImage = new Image(skullFrames.get(0));
-        skullImage.setOrigin(skullImage.getWidth() / 2, skullImage.getHeight() / 2);
-        skullImage.setSize(100, 100);
-        skullImage.setScale(10f);
-
-        var skullAnimation = Actions.forever(
-                Actions.sequence(
-                        Actions.run(() -> {
-                            int frameIndex = (int) (elapsedTime / 0.03333f) % skullFrames.size;
-                            skullImage.setDrawable(new TextureRegionDrawable(skullFrames.get(frameIndex)));
-                            elapsedTime += Gdx.graphics.getDeltaTime();
-                        }),
-                        Actions.delay(0.1f)
-                )
-        );
-
-        skullImage.addAction(skullAnimation);
-        return skullImage;
-    }
-
-    @Override
-    public void render(float delta) {
-        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-        stage.act(Math.min(Gdx.graphics.getDeltaTime(), 1 / 30f));
-        stage.draw();
-    }
-
-    @Override
-    public void resize(int width, int height) {
-        stage.getViewport().update(width, height, true);
-    }
-
-    @Override
-    public void dispose() {
-        stage.dispose();
-    }
-
-    @Override
-    public void show() {
-        Gdx.input.setInputProcessor(stage);
-    }
-
-    private void clickSound() {
-        Music clickMusic = Gdx.audio.newMusic(Gdx.files.internal("click_sound.mp3"));
-        clickMusic.setVolume(2.5f);
-        clickMusic.setLooping(false);
-        clickMusic.play();
-    }
-
-    private void buttonStartNewGameFadeAway(TextButton textButton, MazeRunnerGame game) {
-        textButton.addAction(Actions.sequence(
-                Actions.fadeOut(0.5f),
-                Actions.run(() -> {
-                    game.dispose();
-                    game.create();
-                    game.goToGame();
-                })
-        ));
-    }
-
-    @Override
-    public void pause() {
-    }
-
-    public void resume() {
-    }
-
-    @Override
-    public void hide() {
-    }
-}
Index: core/src/de/tum/cit/ase/maze/SelectScreen.java
===================================================================
diff --git a/core/src/de/tum/cit/ase/maze/SelectScreen.java b/core/src/de/tum/cit/ase/maze/SelectScreen.java
deleted file mode 100644
--- a/core/src/de/tum/cit/ase/maze/SelectScreen.java	
+++ /dev/null	
@@ -1,178 +0,0 @@
-package de.tum.cit.ase.maze;
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.audio.Music;
-import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.OrthographicCamera;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g2d.TextureRegion;
-import com.badlogic.gdx.scenes.scene2d.Actor;
-import com.badlogic.gdx.scenes.scene2d.Stage;
-import com.badlogic.gdx.scenes.scene2d.actions.Actions;
-import com.badlogic.gdx.scenes.scene2d.ui.Image;
-import com.badlogic.gdx.scenes.scene2d.ui.Label;
-import com.badlogic.gdx.scenes.scene2d.ui.Table;
-import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
-import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
-import com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;
-import com.badlogic.gdx.utils.Array;
-import com.badlogic.gdx.utils.viewport.ScreenViewport;
-import com.badlogic.gdx.utils.viewport.Viewport;
-import com.badlogic.gdx.files.FileHandle;
-
-public class SelectScreen implements Screen{
-
-    private final Stage stage;
-    private float elapsedTime = 2f;
-
-    private Array<String> mapNames = new Array<>();
-
-    private static String selectedMap;
-
-
-    public String getSelectedMap() {
-        return selectedMap;
-    }
-
-    /**
-     * Constructor for MenuScreen. Sets up the camera, viewport, stage, and UI elements.
-     *
-     * @param game The main game class, used to access global resources and methods.
-     */
-
-
-
-    public SelectScreen(MazeRunnerGame game) {
-        game.setSelectScreen(this);
-        var camera = new OrthographicCamera();
-        camera.zoom = 1.5f; // Set camera zoom for a closer view
-
-        Viewport viewport = new ScreenViewport(camera); // Create a viewport with the camera
-        stage = new Stage(viewport, game.getSpriteBatch()); // Create a stage for UI elements
-
-        Table table = new Table(); // Create a table for layout
-        table.setFillParent(true); // Make the table fill the stage
-        stage.addActor(table); // Add the table to the stage
-
-        Image fireImage = createFireAnimation();
-        table.add(fireImage).padBottom(100).row();
-
-        // Add a label as a title
-        table.add(new Label("Welcome to Maze Runner Game!", game.getSkin(), "title")).padBottom(50).row();
-        table.add(new Label("Please choose a level", game.getSkin(), "title")).padBottom(80).row();
-
-        getMapNames();
-        for (int i = 0; i < mapNames.size; i++) {
-            int finalI = i+1;
-            String buttonName = "Level"+ finalI;
-            TextButton levelButton = new TextButton(buttonName,game.getSkin());
-
-            table.add(levelButton).width(300).pad(10).row();
-
-            levelButton.addListener(new ChangeListener() {
-                @Override
-                public void changed(ChangeEvent event, Actor actor) {
-                    selectedMap = mapNames.get(finalI-1);
-                    game.setSelectedMap(selectedMap);
-                    System.out.println("inside loop"+game.getSelectedMap());
-                    game.goToMenu();
-
-                }
-
-            });
-
-        }
-
-
-    }
-    private String[] getMapNames() {
-        FileHandle dirHandle = Gdx.files.internal("maps"); // Directory where maps are stored
-
-        for (FileHandle entry : dirHandle.list()) {
-            if (entry.extension().equals("properties")) {
-                mapNames.add("maps/"+entry.name());
-            }
-        }
-        mapNames.sort();
-
-        return mapNames.toArray(String.class);
-    }
-
-
-
-    // Create an animation for the skull
-    private Image createFireAnimation() {
-        Array<TextureRegion> fireFrames = new Array<>();
-        Texture skullSheet = new Texture(Gdx.files.internal("things.png"));
-        int frameWidth = 16;
-        int frameHeight = 16;
-        int animationFramesRow = 3;
-
-        for (int i = 0; i < animationFramesRow; i++) {
-            fireFrames.add(new TextureRegion(skullSheet, 144+ i * frameWidth, 64, frameWidth, frameHeight));
-        }
-
-        Image fireImage = new Image(fireFrames.get(0));
-        fireImage.setOrigin(fireImage.getWidth() / 2, fireImage.getHeight() / 2);
-        fireImage.setSize(100, 100);
-        fireImage.setScale(10f);
-
-        var skullAnimation = Actions.forever(
-                Actions.sequence(
-                        Actions.run(() -> {
-                            int frameIndex = (int) (elapsedTime / 0.03333f) % fireFrames.size;
-                            fireImage.setDrawable(new TextureRegionDrawable(fireFrames.get(frameIndex)));
-                            elapsedTime += Gdx.graphics.getDeltaTime();
-                        }),
-                        Actions.delay(0.1f)
-                )
-        );
-
-        fireImage.addAction(skullAnimation);
-        return fireImage;
-    }
-
-
-
-    @Override
-    public void render(float delta) {
-        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT); // Clear the screen
-        stage.act(Math.min(Gdx.graphics.getDeltaTime(), 1 / 30f)); // Update the stage
-        stage.draw(); // Draw the stage
-    }
-
-    @Override
-    public void resize(int width, int height) {
-        stage.getViewport().update(width, height, true); // Update the stage viewport on resize
-    }
-
-    @Override
-    public void dispose() {
-        // Dispose of the stage when screen is disposed
-        stage.dispose();
-    }
-
-    @Override
-    public void show() {
-        // Set the input processor so the stage can receive input events
-        Gdx.input.setInputProcessor(stage);
-    }
-
-    // The following methods are part of the Screen interface but are not used in this screen.
-    @Override
-    public void pause() {
-
-    }
-
-    @Override
-    public void resume() {
-    }
-
-    @Override
-    public void hide() {
-    }
-
-
-
-
-}
